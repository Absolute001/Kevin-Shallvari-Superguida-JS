/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements:  */
eval("\r\n// I vari riferimenti agli elementi della DOM utilizzati per il progetto \r\nconst forecastDisplay = document.querySelector(\".forecastDisplay\");\r\nconst searchBtn = document.querySelector(\"[aria-label='SearchBtn']\");\r\nconst searchBox = document.querySelector(\"[aria-label='Search']\");\r\nconst geoLoc = document.querySelector(\"[aria-label='geoLoc']\");\r\nconst iconLabel = document.querySelectorAll(\".icon-label\")\r\nconst media = document.querySelectorAll(\".media\");\r\nconst home = document.querySelector(\".home\");\r\nconst dayBg = document.querySelectorAll(\"img\");\r\nconst footer = document.querySelector(\"footer\");\r\nconst suggestions = document.querySelector(\".suggestions\");\r\nconst cityAlert = document.querySelector(\".cityAlert\");\r\n\r\n//Array dei giorni della settimana \r\n\r\nconst dayName = [\"SUNDAY\", \"MONDAY\", \"TUESDAY\", \"WEDNESDAY\", \"THURSDAY\", \"FRIDAY\", \"SATURDAY\"];\r\n\r\n// creazione degli array necessari a storare le informazioni\r\n\r\nconst forecast = new Array();\r\nconst tempMax = new Array();\r\nconst tempMin = new Array();\r\nconst dateMeasured = new Array();\r\nconst daysIndex = new Array();\r\nconst daysOfWeek = new Array();\r\nconst wind = new Array();\r\n\r\nconst baseURL = \"http://api.openweathermap.org/data/2.5/\";\r\nconst apiKey = \"9dbc6ef71ee7d0814e313bbe5e2f5dcb\";\r\n/*La funzione si occupa di fare la richiesta all'API sottoforma di if...else per poter\r\nindividuare gli errori piu comuni: quando accidentalmente si preme enter e la barra di \r\nricerca risulta vuota e quando si sbaglia a digitare un luogo o questo non esiste*/\r\n\r\nfunction getWeather(query) {\r\n    if (searchBox.value === \"\") {\r\n        alert(\"Please Search For A Valid Place\");\r\n    }\r\n    else {\r\n        fetch(`${baseURL}forecast?q=${query}&units=metric&appid=${apiKey}`)\r\n            .then(weather => {\r\n                return weather.json();\r\n            }).then(extractInfo).catch(function (e) {\r\n                e = \"I cannot find this place, maybe a bad request? :(\";\r\n                alert(e);\r\n            });\r\n\r\n    };\r\n}\r\n\r\n/*La funzione estrae le informazioni di cui abbiamo bisogno e le assegna ai rispettivi array che\r\nad ogni richiamo vengo azzerati per poter ospitare i nuovi dati si occupa anche di tenere sempre aggiornati i giorni della settimana che visualizza attraverso\r\nil secondo ciclo for*/\r\n\r\nfunction extractInfo(weather) {\r\n    forecast.length = 0;\r\n    tempMax.length = 0;\r\n    tempMin.length = 0;\r\n    dateMeasured.length = 0;\r\n    daysIndex.length = 0;\r\n    daysOfWeek.length = 0;\r\n    wind.length = 0;\r\n    cityAlert.textContent = weather.city.name;\r\n    for (let i = 0; i < weather.list.length; i += 8) {\r\n        forecast.push(weather.list[i].weather[0].main);\r\n        tempMax.push(weather.list[i].main.temp_max);\r\n        tempMin.push(weather.list[i].main.temp_min);\r\n        dateMeasured.push(weather.list[i].dt_txt);\r\n        wind.push(weather.list[i].wind.speed);\r\n    }\r\n    for (let i = 0; i < dateMeasured.length; i++) {\r\n        let d = new Date(dateMeasured[i]);\r\n        daysIndex.push(d.getDay());\r\n        daysOfWeek.push(dayName[daysIndex[i]]);\r\n    }\r\n    displayWeather();\r\n}\r\n\r\n//La funziokne che si occupa di visualizzare il meteo e al contempo di gestire le animazioni ingresso/uscita tramite la rimozione e l aggiunta di classi\r\n\r\nfunction displayWeather() {\r\n    home.classList.add(\"animate__fadeOutLeft\");\r\n    forecastDisplay.style.display = \"inherit\";\r\n    forecastDisplay.classList.add(\"animate__fadeInUp\");\r\n    geoLoc.classList.add(\"animate__fadeInUp\");\r\n    footer.classList.remove(\"fixed-bottom\");\r\n    footer.classList.add(\"animate_fadeInUps\")\r\n    home.style.height = \"0px\";\r\n    for (let i = 0; i < forecast.length; i++) {\r\n        if (forecast[i] === \"Clear\") {\r\n            dayBg[i].src = \"img/sun.svg\";\r\n            media[i].style.backgroundImage = \"linear-gradient(to bottom right,#E2BB29,#FAB03C 80%)\";\r\n            iconLabel[i].textContent = \"Clear\";\r\n        } else if (forecast[i] === \"Rain\") {\r\n            dayBg[i].src = \"img/rain.svg\";\r\n            media[i].style.backgroundImage = \"linear-gradient(to bottom right, #597DC5 30%,#258CF1)\";\r\n            iconLabel[i].textContent = \"Rain\";\r\n        } else if (forecast[i] === \"Clouds\") {\r\n            dayBg[i].src = \"img/cloud.svg\";\r\n            media[i].style.backgroundImage = \"linear-gradient(to bottom right ,#AECCEA, #EDEDED 90%)\";\r\n            iconLabel[i].textContent = \"Clouds\";\r\n        }\r\n        document.getElementsByClassName(\"day\")[i].textContent = daysOfWeek[i];\r\n        document.getElementsByClassName(\"day\")[0].textContent = \"TODAY\";\r\n        document.getElementsByClassName(\"max_temp_display\")[i].textContent = Math.floor(tempMax[i]) + \"C°\";\r\n        document.getElementsByClassName(\"min_temp_display\")[i].textContent = Math.floor(tempMin[i]) + \"C°\";\r\n        document.getElementsByClassName(\"wind_display\")[i].textContent = wind[i].toFixed(2);\r\n    }\r\n    window.scrollTo(0, 0); //Scroll on top if u are displain another city then u active geoLoc\r\n}\r\n\r\n//Richiama la funzione getWather() quando il pulsante \"Find Me\" viene premuto\r\n//Inserisce come parametro di getWeather la geolocalizzazione\r\n//Rimuove le classi di animazione che verranno re-inserite con displayWeather\r\n\r\n\r\ngeoLoc.addEventListener(\"click\", () =>\r\n    navigator.geolocation.getCurrentPosition(function (position) {\r\n        fetch(`${baseURL}forecast?lat=${position.coords.latitude}&lon=${position.coords.longitude}&units=metric&appid=${apiKey}`)\r\n            .then(weather => {\r\n                return weather.json();\r\n            }).then(extractInfo);\r\n            forecastDisplay.classList.remove(\"animate__fadeInUp\");\r\n            geoLoc.classList.remove(\"animate__fadeInUp\");\r\n        })\r\n\r\n);\r\n\r\n//Richiama la funzione getWather() quando il tasto enter viene premuto \r\n//Inserisce come parametro di getWeather il valore all interno della barra di ricerca\r\n//Rimuove le classi di animazione che verranno re-inserite con displayWeather\r\n\r\n\r\nsearchBox.addEventListener(\"keypress\", function (e) {\r\n    if (e.keyCode === 13) {\r\n        e.preventDefault();\r\n        getWeather(searchBox.value);\r\n        searchBox.value = \"\";\r\n    }\r\n    forecastDisplay.classList.remove(\"animate__fadeInUp\");\r\n    geoLoc.classList.remove(\"animate__fadeInUp\");\r\n\r\n});\r\n\r\n//Richiama la funzione getWather() quando il pulsante submit viene premuto\r\n//Inserisce come parametro di getWeather il valore all interno della barra di ricerca\r\n//Rimuove le classi di animazione che verranno re-inserite con displayWeather\r\n\r\n\r\nsearchBtn.addEventListener(\"click\", function (e) {\r\n    e.preventDefault();\r\n    getWeather(searchBox.value);\r\n    searchBox.value = \"\";\r\n    forecastDisplay.classList.remove(\"animate__fadeInUp\");\r\n    geoLoc.classList.remove(\"animate__fadeInUp\");\r\n\r\n});\r\n\n\n//# sourceURL=webpack://Weather-5-Days/./src/index.js?");
/******/ })()
;